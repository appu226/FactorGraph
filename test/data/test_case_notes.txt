Step 1: Arbitrarily decide truth tables for the output variables [DONE]

// po0
pi0 pi1 lo0 lo1   po0
0     0   0   0   0
0     0   0   1   1
0     0   1   0   1
0     0   1   1   1
0     1   0   0   0
0     1   0   1   0
0     1   1   0   1
0     1   1   1   0
1     0   0   0   1
1     0   0   1   0
1     0   1   0   0
1     0   1   1   1
1     1   0   0   0
1     1   0   1   1
1     1   1   0   0
1     1   1   1   0



// li0
pi0 pi1 lo0 lo1   li0
0     0   0   0   1
0     0   0   1   1
0     0   1   0   1
0     0   1   1   0
0     1   0   0   0
0     1   0   1   1
0     1   1   0   1
0     1   1   1   0
1     0   0   0   1
1     0   0   1   0
1     0   1   0   0
1     0   1   1   0
1     1   0   0   0
1     1   0   1   1
1     1   1   0   1
1     1   1   1   0



// li1
pi0 pi1 lo0 lo1   li1
0     0   0   0   0
0     0   0   1   1
0     0   1   0   0
0     0   1   1   1
0     1   0   0   1
0     1   0   1   1
0     1   1   0   0
0     1   1   1   0
1     0   0   0   1
1     0   0   1   0
1     0   1   0   1
1     0   1   1   1
1     1   0   0   0
1     1   0   1   0
1     1   1   0   1
1     1   1   1   1


Step 2: Write the blif file (see test_case.blif) from these truth tables. [DONE]
   You will see temporary variables like v10010011 in the blif file.
   These variables are named based on the final column of the truth table.
   So v1001001100101111 would be:
     |  pi0 pi1 lo0 lo1   v1001001100101111
     |  0     0   0   0   1
     |  0     0   0   1   0
     |  0     0   1   0   0
     |  0     0   1   1   1
     |  0     1   0   0   0
     |  0     1   0   1   0
     |  0     1   1   0   1
     |  0     1   1   1   1
     |  1     0   0   0   0
     |  1     0   0   1   0
     |  1     0   1   0   1
     |  1     0   1   1   0
     |  1     1   0   0   1
     |  1     1   0   1   1
     |  1     1   1   0   1
     |  1     1   1   1   1
   And variables with a shorter support set can sometimes have smaller names.
   So v10 is:
     |  pi0 pi1 lo0 lo1   v10
     |  0     0   0   0   1
     |  0     0   0   1   0
     |  0     0   1   0   1
     |  0     0   1   1   0
     |  0     1   0   0   1
     |  0     1   0   1   0
     |  0     1   1   0   1
     |  0     1   1   1   0
     |  1     0   0   0   1
     |  1     0   0   1   0
     |  1     0   1   0   1
     |  1     0   1   1   0
     |  1     1   0   0   1
     |  1     1   0   1   0
     |  1     1   1   0   1
     |  1     1   1   1   0

Step 3: parse the blif file with debug verbosity [DONE]
     |  [DEBUG] parsing var pi0 as:
     |  1---  1
     |  [DEBUG] parsing var pi1 as:
     |  -1--  1
     |  [DEBUG] parsing var lo0 as:
     |  --1-  1
     |  [DEBUG] parsing var lo1 as:
     |  ---1  1
     |  [DEBUG] creating var li0 as:
     |  ----1  1
     |  [DEBUG] parsing circuit for li0 as:
     |  000--  1
     |  0010-  1
     |  0101-  1
     |  0110-  1
     |  1000-  1
     |  1101-  1
     |  1110-  1
     |  [DEBUG] creating var li1 as:
     |  -----1  1
     |  [DEBUG] parsing circuit for li1 as:
     |  00-1--  1
     |  010---  1
     |  1000--  1
     |  101---  1
     |  111---  1
     |  [INFO] created 2 factors with 6 vars (2 primary inputs + 4 others) in 0.000282864 sec
     |  [DEBUG] Added 2 factors to partition number 1
     |  [DEBUG] Printing factor: 
     |  000-1-  1
     |  00101-  1
     |  00110-  1
     |  01000-  1
     |  01011-  1
     |  01101-  1
     |  01110-  1
     |  10001-  1
     |  10010-  1
     |  101-0-  1
     |  11000-  1
     |  11011-  1
     |  11101-  1
     |  11110-  1
     |  [DEBUG] Printing factor: 
     |  00-0-0  1
     |  00-1-1  1
     |  010--1  1
     |  011--0  1
     |  1000-1  1
     |  1001-0  1
     |  101--1  1
     |  110--0  1
     |  111--1  1
  And from the logs verify that all circuits and factors are correct.

Step 4: Verify solution
     | [DEBUG] Conjunction of factors in partition
     | 000010  1
     | 000111  1
     | 001010  1
     | 001101  1
     | 010001  1
     | 010111  1
     | 011010  1
     | 011100  1
     | 100011  1
     | 100100  1
     | 101-01  1
     | 110000  1
     | 110110  1
     | 111011  1
     | 111101  1
     | [DEBUG] Quantified result from partition
     | --00--  1
     | --0100  1
     | --011-  1
     | --1001  1
     | --101-  1
     | --110-  1
     | [INFO] Finished over approximating method ExactAndAccumulate in 0.000115112 sec
     | [INFO] Over approximating method ExactAndAccumulate finished with 12 solutions.

  Hand computation
     
     | --0000  1
     | --0001  1
     | --0010  1
     | --0011  1
     | --0100  1
     | --0110  1
     | --0111  1
     | --1001  1
     | --1010  1
     | --1011  1
     | --1100  1
     | --1101  1
  Ans is 12.

Step 5:



